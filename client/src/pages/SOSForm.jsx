import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import './SOSForm.css';

function SOSForm() {
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [success, setSuccess] = useState(false);
  const [formData, setFormData] = useState({
    phone: '',
    requestType: 'food',
    description: '',
    latitude: null,
    longitude: null,
    address: '',
  });

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setFormData(prev => ({
            ...prev,
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          }));
        },
        (error) => {
          console.error('Error getting location:', error);
        }
      );
    }
  }, []);

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.latitude || !formData.longitude) {
      alert('Vui l√≤ng b·∫≠t ƒë·ªãnh v·ªã GPS ƒë·ªÉ g·ª≠i y√™u c·∫ßu');
      return;
    }

    setLoading(true);

    try {
      const response = await axios.post('/api/rescue/requests', formData);
      
      if (response.data.success) {
        setSuccess(true);
        setTimeout(() => {
          navigate('/');
        }, 3000);
      }
    } catch (error) {
      console.error('Error submitting request:', error);
      alert('C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="sos-container success-screen">
        <div className="success-message">
          <div className="success-icon">‚úì</div>
          <h2>Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i!</h2>
          <p>L·ª±c l∆∞·ª£ng c·ª©u h·ªô s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t.</p>
          <p>Vui l√≤ng gi·ªØ m√°y ƒëi·ªán tho·∫°i b·∫≠t v√† s·∫°c pin.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="sos-container">
      <div className="sos-header">
        <button onClick={() => navigate('/')} className="back-btn">‚Üê Quay l·∫°i</button>
        <h1>üÜò G·ª≠i y√™u c·∫ßu c·ª©u tr·ª£</h1>
      </div>

      <form onSubmit={handleSubmit} className="sos-form">
        <div className="form-group">
          <label>S·ªë ƒëi·ªán tho·∫°i *</label>
          <input
            type="tel"
            name="phone"
            value={formData.phone}
            onChange={handleChange}
            placeholder="0912345678"
            required
            className="form-input"
          />
        </div>

        <div className="form-group">
          <label>Lo·∫°i y√™u c·∫ßu *</label>
          <select
            name="requestType"
            value={formData.requestType}
            onChange={handleChange}
            required
            className="form-select"
          >
            <option value="food">L∆∞∆°ng th·ª±c, n∆∞·ªõc u·ªëng</option>
            <option value="medical">Y t·∫ø, c·∫•p c·ª©u</option>
            <option value="evacuation">S∆° t√°n kh·∫©n c·∫•p</option>
            <option value="shelter">N∆°i tr√∫ ·∫©n</option>
            <option value="other">Kh√°c</option>
          </select>
        </div>

        <div className="form-group">
          <label>M√¥ t·∫£ t√¨nh tr·∫°ng</label>
          <textarea
            name="description"
            value={formData.description}
            onChange={handleChange}
            placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn t√¨nh tr·∫°ng hi·ªán t·∫°i c·ªßa b·∫°n..."
            rows="4"
            className="form-textarea"
          />
        </div>

        <div className="form-group">
          <label>ƒê·ªãa ch·ªâ c·ª• th·ªÉ</label>
          <input
            type="text"
            name="address"
            value={formData.address}
            onChange={handleChange}
            placeholder="S·ªë nh√†, t√™n ƒë∆∞·ªùng, x√£/ph∆∞·ªùng..."
            className="form-input"
          />
        </div>

        <div className="location-info">
          {formData.latitude && formData.longitude ? (
            <p className="location-success">
              ‚úì V·ªã tr√≠ GPS ƒë√£ ƒë∆∞·ª£c x√°c ƒë·ªãnh
              <br />
              <small>
                {formData.latitude.toFixed(6)}, {formData.longitude.toFixed(6)}
              </small>
            </p>
          ) : (
            <p className="location-pending">‚åõ ƒêang l·∫•y v·ªã tr√≠ GPS...</p>
          )}
        </div>

        <button
          type="submit"
          disabled={loading || !formData.latitude}
          className="submit-btn"
        >
          {loading ? 'ƒêang g·ª≠i...' : 'G·ª≠i y√™u c·∫ßu c·ª©u tr·ª£'}
        </button>

        <p className="form-note">
          * Th√¥ng tin b·∫Øt bu·ªôc
        </p>
      </form>
    </div>
  );
}

export default SOSForm;
