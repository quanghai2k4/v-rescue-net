version: '3.8'

services:
  postgres:
    image: postgis/postgis:15-3.3-alpine
    container_name: vrescue-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: vrescuenet
      POSTGRES_USER: vrescue
      POSTGRES_PASSWORD: ${DB_PASSWORD:-vrescue_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vrescue -d vrescuenet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vrescue-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vrescue-backend
    restart: unless-stopped
    environment:
      PORT: 5000
      DATABASE_URL: postgresql://vrescue:${DB_PASSWORD:-vrescue_password_123}@postgres:5432/vrescuenet
      NODE_ENV: production
      CLIENT_URL: ${CLIENT_URL:-http://localhost}
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - vrescue-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: vrescue-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - vrescue-network

volumes:
  postgres_data:
    driver: local

networks:
  vrescue-network:
    driver: bridge
